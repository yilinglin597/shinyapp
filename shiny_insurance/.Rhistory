mean(x2, na.rm=TRUE),
x2))
missing.data
#Mean value imputation method 3.
library(caret)
pre = caret::preProcess(missing.data, method = "medianImpute")
missing.data = predict(pre, missing.data)
missing.data
missing.data
missing.data
### Why Caret?
## 1. Maintain the structure of train - predict as other machine learning procedure.
##    This is particularly important when impute for future observation
## 2. Can be collected with other preprocesses, as below:
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("scale", "medianImpute"))
missing.data = predict(pre, missing.data)
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("center","scale", "medianImpute"))
missing.data = predict(pre, missing.data)
##################################
#####Simple Random Imputation#####
##################################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
#impute() function from the Hmisc package.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
#Imputing using 9NN.
imputed.9nn = kNN(missing.data, k=9)
imputed.1nn = predict(pre.1nn, missing.data)
#############################
#####K-Nearest Neighbors#####
#############################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
#############################
#####K-Nearest Neighbors#####
#############################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
imputed.1nn
#Imputing using 5NN.
imputed.5nn = kNN(missing.data, k=5)
imputed.5nn
#Imputing using 9NN.
imputed.9nn = kNN(missing.data, k=9)
imputed.9nn
### Imputing with caret
### Note: knnImpute with caret::preProcess force normalization
#Imputing using 1NN.
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
#Imputing using 5NN.
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5)
imputed.5nn = predict(pre.5nn, missing.data)
#Imputing using 9NN.
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9)
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
setwd("~/Desktop/shiny_app_project/shiny_insurance")
runApp()
setwd("~/Desktop/shiny_app_project/shiny_insurance")
runApp()
insurance_df %>% group_by(smoker) %>%
summarise(number_of_smoker=n())  %>%
filter(region==input$selected_region)
runApp()
insurance_df %>% group_by(smoker)
insurance_df %>% group_by(smoker)
smoker_percentage <- insurance_df %>%
summarise(percentage=sum(smoker==Yes)/n(smoker))
smoker_percentage <- insurance_df %>%
summarise(percentage=sum(smoker==yes)/n(smoker))
runApp()
smoker_percentage <- insurance_df %>% group_by(region, smoker) %>%
summarise(ratio=sum(smoker=="yes")/n())  %>%
smoker_percentage <- insurance_df %>% group_by(region, smoker) %>%
+     summarise(ratio=sum(smoker=="yes")/n())  %>%
+
smoker_percentage <- insurance_df %>% group_by(region, smoker) %>%
summarise(ratio=sum(smoker=="yes")/n())
runApp()
runApp()
ratio=sum(smoker=="yes")/n())
ratio=sum(smoker=="yes")/n()
runApp()
insurance_df
insurance_df %>% group_by(region) %>%
summarise(ratio=sum(smoker=="yes")/n())
smoker_percentage <- insurance_df %>% group_by(region, smoker)
smoker_percentage <- insurance_df %>% group_by(region, smoker) %>%
summarise(ratio=sum(smoker=="yes")/n())
smoker_percentage <- insurance_df %>% group_by(region) %>%
summarise(ratio=sum(smoker=="yes")/n())
smoker_percentage <- insurance_df %>% group_by(region) %>%
summarise(ratio=sum(smoker=="yes")/n())
insurance_df %>% group_by(region) %>%
summarise(ratio=sum(smoker=="yes")/n())
insurance_df %>% group_by(region, smoker) %>%
summarise(ratio=sum(smoker=="yes")/n())
runApp()
smoker_ratio <- insurance_df %>% group_by(region) %>%
summarise(ratio=sum(smoker=="yes")/n())
smoker_ratio
runApp()
runApp()
smoker ratio
smoker_ratio
runApp()
insurance_df
runApp()
runApp()
setwd("~/Downloads/Machine Learning with R/Missingness and KNN")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(PASWR)
# Your code here
data(titanic3)
# Your code here
data(titanic3)
titanic3
PASWR?
# Your code here
library(PASWR)
setwd("~/Downloads/Machine Learning with R/Missingness and KNN")
install.packages("PASWR")
# Your code here
library(PASWR)
# Your code here
library(PASWR)
data("titanic3")
# Your code here
library(PASWR)
data("titanic3")
titanic3
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
sum(is.na(titanic3))
sum(is.na(titanic3))
mean(is.na(titanic3))
# Your code here
sum(is.na(titanic3))
mean(is.na(titanic3))
sum(!complete.cases(titanic3))
sum(!complete.cases(titanic3))
sum(!complete.cases(titanic3))
mean(!complete.cases(titanic3))
# Your code here
library(VIM)
aggr(titanic3)
# Your code here
library(VIM)
aggr(titanic3)
library(mice)
md.pattern(titanic3)
# Your code here
table(titanic3$survived, is.na(titanic3$body))
hist(titanic3$age)
# Your code here
library(Hmisc)
age_mean_impute = impute(titanic3$age, mean)
# Your code here
library(Hmisc)
age_mean_impute = impute(titanic3$age, mean)
age_mean_impute
# Your code here
library(Hmisc)
age_mean_impute = impute(titanic3$age, mean)
age_mean_impute
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# 6 Impute using mean value imputation for the age variable.
# 7 Impute using simple random imputation for the age variable.
library(Hmisc)
set.seed(0)
age.meanimpute = Hmisc::impute(titanic3$age, mean)
age.randomimpute = Hmisc::impute(titanic3$age, "random")
plot(density(age.meanimpute), col = "red",
main = "Imputation Methods for Age")
lines(density(age.randomimpute), col = "green")
lines(density(titanic3$age, na.rm = TRUE), col = "blue")
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("blue", "red", "green"), lwd = 1)
#Mean Value Imputation: The mean value inputation tends to skew the distribution
#heavily towards the average value of the original dataset. This makes a local
#mode right at the mean, and can make our data appear numerically more centralized
#than it actually is in reality.
# Your code here
library(Hmisc)
age_mean_impute = impute(titanic3$age, mean)
age_mean_impute
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "blue")
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, random)
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue';)
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("green", "red", "green"))
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("green", "red", "green"), lwd = 2)
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("green", "red", "blue"), lwd = 2)
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("green", "red", "blue"), lwd = 8)
# Your code here
set.seed(0)
age_random_impute = impute(titanic3$age, 'random')
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(titanic3$age, na.rm = TRUE), col = "green")
lines(density(age_random_impute), col='blue')
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("green", "red", "blue"), lwd = 2)
# Your code here
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
set.seed(0)
fare.randomimpute = Hmisc::impute(titanic3$fare, "random")
summary(fare.randomimpute) #The one value was imputed to be $69.55
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
summary(fare_random_impute)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
#age - 20.09% fare - 0.08% body - 90.76%
# Your code here
plot(plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age"))
col.vec = NULL
col.vec[titanic3$pclass == "1st"] = "red"
col.vec[titanic3$pclass == "2nd"] = "blue"
col.vec[titanic3$pclass == "3rd"] = "green"
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
#Higher fares seem to be associated with 1st class tickets. The older a passenger
#is, the more likely they seem to have an upper-class ticket.
# Your code here
plot(plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(fare_random_impute), col = "green")
# Your code here
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(fare_random_impute), col = "green")
# Your code here
plot(age_mean_impute, fare_random_impute)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
#age - 20.09% fare - 0.08% body - 90.76%
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass=='1st', 'red', ifelse(pclass=='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass=1st, 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass='1st', 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass='1st', 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass=1st, 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col='red')
#=ifelse(titantic3$pclass=1st, 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
#plot
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass="1st", 'red', 'blue'))
# Your code here
titanic3
#new_titantic3 <- titanic3[c()]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:5,7)]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:5,7)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:6)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7), fare=fare_random_impute]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3[fare]=fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3[fare]=fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
titanic3
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titanic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titanic3
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
new_titanic3$fare<-fare_random_impute
new_titanic3
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3),]
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3)),]
#1190
#mean(!complete.cases(titanic3))
#around 90.91%
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3)),]
missing=new_titanic3[(!complete.cases(new_titanic3)), -4]
all_complete
missing
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
titanic.notimputed = cbind(titanic3[, -c(3, 8:14)], fare = fare.randomimpute)
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
missing = titanic.notimputed[!complete.cases(titanic.notimputed), -4]
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
missing = titanic.notimputed[!complete.cases(titanic.notimputed), -4]
missing
# Your code here
library(kknn)
titanic.1nnmanhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
titanic.1nneuclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
titanic.1nnminkowski10 = kknn(age ~ ., complete, missing, k = 1, distance = 10)
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#The different distance measures are each generally matching the age distribution,
#but each are pulling out different local modes because of calculation differences.
mean(missing.data$x2) #Mean of x2 after imputation.
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
PASWR::
insurance_df
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
insurance_df
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp()
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
setwd("~/Desktop/shinyapp_medical_cost/shiny_insurance")
runApp()
