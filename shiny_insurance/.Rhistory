col = c("green", "red", "blue"), lwd = 2)
# Your code here
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
set.seed(0)
fare.randomimpute = Hmisc::impute(titanic3$fare, "random")
summary(fare.randomimpute) #The one value was imputed to be $69.55
# Your code here
summary(titanic3$fare)
set.seed(0)
fate_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
summary(titanic3$fare)
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
# Your code here
summary(titanic3$fare)
set.seed(0)
fare_random_impute = impute(titanic3$fare, 'random')
summary(fare_random_impute)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
#age - 20.09% fare - 0.08% body - 90.76%
# Your code here
plot(plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age"))
col.vec = NULL
col.vec[titanic3$pclass == "1st"] = "red"
col.vec[titanic3$pclass == "2nd"] = "blue"
col.vec[titanic3$pclass == "3rd"] = "green"
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
#Higher fares seem to be associated with 1st class tickets. The older a passenger
#is, the more likely they seem to have an upper-class ticket.
# Your code here
plot(plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(fare_random_impute), col = "green")
# Your code here
plot(density(age_mean_impute), col = "red",
main = "Imputation Methods for Age")
lines(density(fare_random_impute), col = "green")
# Your code here
plot(age_mean_impute, fare_random_impute)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
#age - 20.09% fare - 0.08% body - 90.76%
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass=='1st', 'red', ifelse(pclass=='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass=1st, 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass='1st', 'red', ifelse(pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass='1st', 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass='1st', 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass=1st, 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col='red')
#=ifelse(titantic3$pclass=1st, 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
#plot
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(pclass="1st", 'red', 'blue'))
# Your code here
titanic3
#new_titantic3 <- titanic3[c()]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:5,7)]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:5,7)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:6)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7), fare=fare_random_impute]
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3[fare]=fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3[fare]=fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
titanic3
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titanic3
# Your code here
titanic3
new_titantic3 <- titanic3[c(1:2,4:7)]
new_titanic3
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
#new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
new_titantic3$fare<-fare_random_impute
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
new_titanic3$fare<-fare_random_impute
new_titanic3
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3),]
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3)),]
#1190
#mean(!complete.cases(titanic3))
#around 90.91%
# Your code here
all_complete=new_titanic3[(complete.cases(new_titanic3)),]
missing=new_titanic3[(!complete.cases(new_titanic3)), -4]
all_complete
missing
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
titanic.notimputed = cbind(titanic3[, -c(3, 8:14)], fare = fare.randomimpute)
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
missing = titanic.notimputed[!complete.cases(titanic.notimputed), -4]
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
missing = titanic.notimputed[!complete.cases(titanic.notimputed), -4]
missing
# Your code here
library(kknn)
titanic.1nnmanhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
titanic.1nneuclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
titanic.1nnminkowski10 = kknn(age ~ ., complete, missing, k = 1, distance = 10)
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#The different distance measures are each generally matching the age distribution,
#but each are pulling out different local modes because of calculation differences.
mean(missing.data$x2) #Mean of x2 after imputation.
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
PASWR::
insurance_df
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shiny_app_project/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
insurance_df
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp()
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
setwd("~/Desktop/shinyapp_medical_cost/shiny_insurance")
runApp()
shiny::runApp()
runApp()
setwd("~/Downloads/Machine Learning with R/Missingness and KNN")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(PASWR)
data("titanic3")
titanic3
dim(titanic3)
summary(titanic3)
#age, fair, body have missing values.
colSums(is.na(titanic3))/nrow(titanic3)
#age - 20.09% fare - 0.08% body - 90.76%
sum(!complete.cases(titanic3))
#1190
mean(!complete.cases(titanic3))
#around 90.91%
# Your code here
sum(is.na(titanic3))
mean(is.na(titanic3))
# Your code here
library(VIM)
aggr(titanic3)
library(mice)
md.pattern(titanic3)
#4 differences of combinations:
#1 missing just the body variable
#2 missing just the age variable
#3 missing age and body and age variable
#4 missing just the fare variable
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(PASWR)
dim(titanic3)
str(titanic3)
summary(titanic3)
# Or using md.pattern() in mice to bulid a data frame or a matrix containing the incomplete data.
# Method 1: Sum of NAs / Total
colSums(is.na(titanic3)) * 100 / nrow(titanic3)
# Method 2: Mean
colMeans(is.na(titanic3)) * 100
# The age variable contains 263 missing values, about 20.09% of this variable.
# The fare variable contains 1 missing value, about 0.08% of this variable.
# The body variable contains 1,188 missing values, about 90.76% of this variable.
sum(!complete.cases(titanic3))
# There are 1,190 observations that contain at least one missing value
mean(!complete.cases(titanic3)) * 100
# about 90.91% of observations in the dataset.
sum(is.na(titanic3))
mean(is.na(titanic3)) * 100
# There are 1,452 missing cells in the entire dataset,
# about 7.92% of all cells in the dataset.
library(VIM)
aggr(titanic3)
library(mice)
md.pattern(titanic3)
# About the graph:
# left: barplot of the proportions of missing values in each variable
# right: all exisiting combinations of missing(red) and non-missing(blue) values in the observations.
# The frequencies of the combinations are visualized by small horizontal bars.
# https://cran.r-project.org/web/packages/VIMGUI/vignettes/VIM-EU-SILC.pdf
#There are four different missingness combinations:
#-Missing just the body variable.
#-Missing just the age variable.
#-Missing just the fare variable.
#-Missing both the age and body variables.
# 6 Impute using mean value imputation for the age variable.
# 7 Impute using simple random imputation for the age variable.
library(Hmisc)
set.seed(0)
age.meanimpute = Hmisc::impute(titanic3$age, mean)
age.randomimpute = Hmisc::impute(titanic3$age, "random")
plot(density(age.meanimpute), col = "red",
main = "Imputation Methods for Age")
lines(density(age.randomimpute), col = "green")
lines(density(titanic3$age, na.rm = TRUE), col = "blue")
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("blue", "red", "green"), lwd = 1)
#Mean Value Imputation: The mean value inputation tends to skew the distribution
#heavily towards the average value of the original dataset. This makes a local
#mode right at the mean, and can make our data appear numerically more centralized
#than it actually is in reality.
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass=1st, 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
titanic3
new_titanic3 <- titanic3[c(1:2,4:7)]
new_titanic3
new_titanic3$fare<-fare_random_impute
new_titanic3
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
mice::md.pattern(sleep) #Can also view this information from a data perspective.
###############################
#####Mean Value Imputation#####
###############################
#Creating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
mice::md.pattern(sleep) #Can also view this information from a data perspective.
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass='1st', 'red', ifelse(titantic3$pclass='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titantic3$pclass=='1st', 'red', ifelse(titantic3$pclass=='2nd', 'green', 'blue')))
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titanic3$pclass=='1st', 'red', ifelse(titanic3$pclass=='2nd', 'green', 'blue')))
#plot?
md.pattern(titanic3)
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
new.people = data.frame(age = c(50, 10), fare = c(400, 100), pclass = NA)
points(new.people, pch = 16)
## use ggplot2
imputed.titanic= as.data.frame(cbind(age.randomimpute,fare.randomimpute,pclass=titanic3$pclass))
ggplot(imputed.titanic,aes(age.randomimpute, fare.randomimpute,colour=as.factor(pclass))) +
geom_point() +
annotate(x=50,y=400,geom = "point",color=I("black"))+annotate(x=10,y=100,geom = "point",color=I("black"))
# Your code here
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
new.people = data.frame(age = c(50, 10), fare = c(400, 100), pclass = NA)
points(new.people, pch = 16)
# Your code here
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#Using 1-NN, both passengers were classified into 1st class.
# Your code here
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
# Your code here
plot(age_mean_impute, fare_random_impute, col=ifelse(titanic3$pclass=='1st', 'red', ifelse(titanic3$pclass=='2nd', 'green', 'blue')))
new.people = data.frame(age = c(50, 10), fare = c(400, 100), pclass = NA)
points(new.people, pch = 16)
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
k <- as.integer(sqrt(nrow(titanic.imputed)))
titanic.36NN = kNN(rbind(titanic.imputed, new.people), k = k)
#Using 36-NN, the first passenger remained in 1st class because the neighborhood
#nearby contains all 1st class passengers. On the other hand, the other passenger
#is now classified into 3rd class because most of his neighbors are of 3rd class,
#even though his nearest neighbor is in 1st class.
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titanic.1NN
#Using 1-NN, both passengers were classified into 1st class.
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titanic.1NN
#Using 1-NN, both passengers were classified into 1st class.
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titanic.1NN$fare == 50
#Using 1-NN, both passengers were classified into 1st class.
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titabic.1NN[titanic.1NN$fare] == 50
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
titanic.1NN[titanic.1NN$fare] == 50
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#Using 1-NN, both passengers were classified into 1st class.
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
summary(titanic.1NN)
#Using 1-NN, both passengers were classified into 1st class.
# Your code here
k <- as.integer(sqrt(nrow(titanic.imputed)))
titanic.36NN = kNN(rbind(titanic.imputed, new.people), k = k)
# Your code here
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
# Your code here
titanic.36nnmanhattan = kknn(age ~ ., complete, missing, k = 36, distance = 1)
titanic.36nneuclidean = kknn(age ~ ., complete, missing, k = 36, distance = 2)
titanic.36nnminkowski10 = kknn(age ~ ., complete, missing, k = 36, distance = 10)
plot(density(titanic.36nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n36 Nearest Neighbors")
lines(density(titanic.36nneuclidean$fitted.values), col = "green")
lines(density(titanic.36nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
plot(density(titanic.36nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n36 Nearest Neighbors")
lines(density(titanic.36nneuclidean$fitted.values), col = "green")
lines(density(titanic.36nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#As we increase the number of considered neighbors, we see that we tend to
#smooth over local modes and highlight the global aspects of the distribution. As
#a result, the various distance measures tend to appear much similar than they
#did when we only used one neighbor.
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
#lines(density(titanic.1nneuclidean$fitted.values), col = "green")
#lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
#lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
#legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
#col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#The different distance measures are each generally matching the age distribution,
#but each are pulling out different local modes because of calculation differences.
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
#col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#The different distance measures are each generally matching the age distribution,
#but each are pulling out different local modes because of calculation differences.
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
#The different distance measures are each generally matching the age distribution,
#but each are pulling out different local modes because of calculation differences.
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
titanic.1NN$pclass
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
# Your code here
titanic.imputed = data.frame(age = age_random_impute,
fare = fare_random_impute,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
#
titanic.1NN$pclass
# Your code here
k <- as.integer(sqrt(nrow(titanic.imputed)))
titanic.36NN = kNN(rbind(titanic.imputed, new.people), k = k)
runApp('~/Desktop/shinyapp_medical_cost/shiny_insurance')
